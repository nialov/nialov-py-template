"""
Nox test suite.
"""
from pathlib import Path
from shutil import rmtree
from typing import List

import nox

# Variables
package_name = "[[ package ]]"

# Paths
docs_apidoc_dir_path = Path("docs_src/apidoc")
docs_dir_path = Path("docs")
coverage_svg_path = Path("docs_src/imgs/coverage.svg")

# Path strings
tests_name = "tests"
pipfile_lock = "Pipfile.lock"
notebooks_name = "notebooks"
docs_notebooks_name = "docs_src/notebooks"
tasks_name = "tasks.py"
noxfile_name = "noxfile.py"
pylama_config = "pylama.ini"
dev_requirements = "requirements.txt"
docs_requirements = "docs_src/requirements.txt"

# Globs
docs_notebooks = Path("docs_src/notebooks").glob("*.ipynb")
regular_notebooks = Path(notebooks_name).glob("*.ipynb")
all_notebooks = list(docs_notebooks) + list(regular_notebooks)


def filter_paths_to_existing(*iterables) -> List[str]:
    """
    Filter paths to only existing.
    """
    return [path for path in iterables if Path(path).exists()]


def fill_notebook(session, notebook: Path):
    """
    Execute and fill notebook outputs.
    """
    session.run(
        "jupyter",
        "nbconvert",
        "--to",
        "notebook",
        "--inplace",
        "--execute",
        str(notebook),
    )


@nox.session(python="3.8")
def tests_pip(session):
    """
    Run test suite with pip install.
    """
    # Install dependencies dev + coverage
    session.install(".[coverage]")
    session.install("-r", dev_requirements)

    # Test with pytest and determine coverage
    session.run("coverage", "run", "--source", package_name, "-m", "pytest")

    # Fails with test coverage under 70
    session.run("coverage", "report", "--fail-under", "70")

    # Make coverage-badge image
    if coverage_svg_path.exists():
        coverage_svg_path.unlink()
    elif not coverage_svg_path.parent.exists():
        coverage_svg_path.parent.mkdir(parents=True)
    session.run("coverage-badge", "-o", str(coverage_svg_path))


@nox.session(python="3.8")
def notebooks(session):
    """
    Run notebooks.

    Notebooks are usually run in remote so use pip install.
    Note that notebooks shouldn't have side effects i.e. file disk file writing.
    """
    session.install(".")
    session.install("-r", dev_requirements)
    # Test notebook(s)
    for notebook in all_notebooks:
        fill_notebook(session=session, notebook=notebook)


@nox.session(python="3.8")
def format(session):
    """
    Format Python files, notebooks and docs_src.
    """
    # Install only format dependencies
    session.install("black", "black-nb", "isort")
    existing_paths = filter_paths_to_existing(
        package_name, tests_name, tasks_name, noxfile_name
    )

    # Format python files
    session.run("black", *existing_paths)

    # Format python file imports
    session.run(
        "isort",
        *existing_paths,
    )

    # Format notebooks
    for notebook in all_notebooks:
        session.run("black-nb", str(notebook))


@nox.session(python="3.8")
def lint(session):
    """
    Lint python files, notebooks and docs_src.
    """
    # Install only lint dependencies
    session.install("rstcheck", "sphinx", "black", "black-nb", "isort", "pylama")
    existing_paths = filter_paths_to_existing(
        package_name, tests_name, tasks_name, noxfile_name
    )

    # Lint docs
    session.run(
        "rstcheck",
        "-r",
        "docs_src",
        "--ignore-directives",
        "automodule",
    )

    # Lint Python files with black (all should be formatted.)
    session.run("black", "--check", *existing_paths)
    session.run(
        "isort",
        "--check-only",
        *existing_paths,
    )

    # Lint with pylama
    session.run(
        "pylama",
        "-o",
        pylama_config,
        *existing_paths,
    )

    for notebook in all_notebooks:
        # Lint notebooks with black-nb (all should be formatted.)
        session.run("black-nb", "--check", str(notebook))


@nox.session
def requirements(session):
    """
    Sync poetry requirements from pyproject.toml to requirements.txt
    """
    # Install poetry
    session.install("poetry")

    # Sync dev requirements
    session.run("poetry", "export", "--without-hashes", "--dev", "-o", dev_requirements)

    # Sync docs requirements
    session.run(
        "poetry",
        "export",
        "--without-hashes",
        "--dev",
        "-E",
        "docs",
        "-o",
        dev_requirements,
    )


@nox.session
def docs(session):
    """
    Make documentation.

    Installation mimics readthedocs install.
    """
    # Install from docs_src/requirements.txt that has been synced with docs
    # requirements
    session.install(".")
    session.install("-r", docs_requirements)

    # Remove old apidocs
    if docs_apidoc_dir_path.exists():
        rmtree(docs_apidoc_dir_path)

    # Remove all old docs
    if docs_dir_path.exists():
        rmtree(docs_dir_path)

    # Execute and fill cells in docs notebooks
    for notebook in docs_notebooks:
        fill_notebook(session=session, notebook=notebook)

    # Create apidocs
    session.run(
        "sphinx-apidoc", "-o", "./docs_src/apidoc", f"./{package_name}", "-e", "-f"
    )

    # Create docs in ./docs folder
    session.run(
        "sphinx-build",
        "./docs_src",
        "./docs",
        "-b",
        "html",
    )


@nox.session
def update_version(session):
    """
    Update package version from git vcs.
    """
    # Install poetry-dynamic-versioning
    session.install("poetry-dynamic-versioning")

    # Run poetry-dynamic-versioning to update version tag in pyproject.toml
    # and [[ package ]]/__init__.py
    session.run("poetry-dynamic-versioning")
