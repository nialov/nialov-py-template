"""
Invoke tasks.

Most tasks employ nox to create a virtual session for testing.
"""
from invoke import task
from pathlib import Path
from time import strftime
from itertools import chain
import re


PACKAGE_NAME = "[[ package ]]"
CITATION_CFF_PATH = Path("CITATION.cff")
DATE_RELEASED_STR = "date-released"

VERSION_GLOBS = [
    "*/__init__.py",
    "CITATION.cff",
    "pyproject.toml",
]

VERSION_PATTERN = r"(^_*version_*\s*[:=]\s\").*\""


@task
def requirements(c):
    """
    Sync requirements.
    """
    c.run("nox --session requirements")


@task(pre=[requirements])
def format_and_lint(c):
    """
    Format and lint everything.
    """
    c.run("nox --session format_and_lint")


@task
def update_version(c, tag=""):
    """
    Update pyproject.toml and package/__init__.py version strings.
    """
    if len(tag) == 0:
        c.run("nox --session update_version")
        return

    tag = tag if "v" not in tag else tag[1:]
    for path in chain(*[Path(".").glob(glob) for glob in (VERSION_GLOBS)]):
        new_lines = []
        for line in path.read_text().splitlines():
            substituted = re.sub(VERSION_PATTERN, r"\1" + tag + r'"', line)
            if line != substituted:
                print(
                    f"Replacing version string:\n{line}\nin"
                    f" {path} with:\n{substituted}\n"
                )
                new_lines.append(substituted)
            else:
                new_lines.append(line)
        path.write_text("\n".join(new_lines))


@task(pre=[requirements, update_version])
def ci_test(c, python=""):
    """
    Test suite for continous integration testing.

    Installs with pip, tests with pytest and checks coverage with coverage.
    """
    python_version = "" if len(python) == 0 else f"-p {python}"
    c.run(f"nox --session tests_pip {python_version}")


@task(pre=[requirements, update_version])
def docs(c):
    """
    Make documentation to docs using nox.
    """
    print("Making documentation.")
    c.run("nox --session docs")


@task(pre=[requirements])
def notebooks(c):
    """
    Execute and fill notebooks.
    """
    print("Executing and filling notebooks.")
    c.run("nox --session notebooks")


@task(pre=[requirements, update_version])
def build(c):
    """
    Build package with poetry.
    """
    print("Building package with poetry.")
    c.run("nox --session build")


@task(pre=[requirements])
def typecheck(c):
    """
    Typecheck ``[[ package ]]`` with ``mypy``.
    """
    print("Typechecking Python code with mypy.")
    c.run("nox --session typecheck")


@task(pre=[requirements])
def performance_profile(c):
    """
    Profile [[ package ]] performance with ``pyinstrument``.
    """
    print("Profiling [[ package ]] performance with pyinstrument.")
    c.run("nox --session profile_performance")


@task
def citation(c):
    """
    Sync and validate CITATION.cff.
    """
    print("Updating CITATION.cff date")
    citation_text = CITATION_CFF_PATH.read_text()
    citation_lines = citation_text.splitlines()
    if DATE_RELEASED_STR not in citation_text:
        raise ValueError(
            f"Expected to find {DATE_RELEASED_STR} str in {CITATION_CFF_PATH}."
            f"\nCheck & validate {CITATION_CFF_PATH}."
        )
    date = strftime("%Y-%m-%d")
    new_lines = [
        line if "date-released" not in line else f'date-released: "{date}"'
        for line in citation_lines
    ]
    CITATION_CFF_PATH.write_text("\n".join(new_lines))

    print("Validating CITATION.cff")
    c.run("nox --session validate_citation_cff")


@task(
    pre=[requirements, update_version, format_and_lint, ci_test, build, docs, citation]
)
def prepush(_):
    """
    Test suite for locally verifying continous integration results upstream.
    """


@task
def pre_commit(c, only_run=False, only_install=False):
    """
    Verify that pre-commit is installed, install its hooks and run them.
    """
    cmd = "pre-commit --help"
    try:
        c.run(cmd, hide=True)
    except Exception:
        print(f"Could not run '{cmd}'. Make sure pre-commit is installed.")
        raise

    if not only_run:
        c.run("pre-commit install")
        c.run("pre-commit install --hook-type commit-msg")
        print("Hooks installed!")

    if not only_install:
        print("Running on all files.")
        c.run("pre-commit run --all-files")


@task(
    pre=[
        prepush,
        notebooks,
        typecheck,
        performance_profile,
    ]
)
def make(_):
    """
    Make all.
    """
    print("---------------")
    print("make successful.")
