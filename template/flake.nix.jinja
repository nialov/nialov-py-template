{
  description = "nix declared development environment";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    nix-extra = {
      url = "github:nialov/nix-extra";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    flake-utils.url = "github:numtide/flake-utils";
    pre-commit-hooks = { url = "github:cachix/pre-commit-hooks.nix"; };
  };

  outputs = { self, nixpkgs, flake-utils, ... }@inputs:
    let inherit (nixpkgs) lib;
    in lib.recursiveUpdate
    (flake-utils.lib.eachSystem [ flake-utils.lib.system.x86_64-linux ] (system:
      let
        # Initialize nixpkgs for system
        pkgs = import nixpkgs {
          inherit system;
          overlays = [ self.overlays.default ];
        };

        devShellPackages = with pkgs; [
          pre-commit
          pandoc
          poetry-with-c-tooling
          # Supported python versions
          python39
          python310
          python311
        ];

      in {
        checks = lib.recursiveUpdate {
          preCommitCheck = inputs.pre-commit-hooks.lib.${system}.run
            (import ././pre-commit.nix { inherit pkgs; });

        } self.packages."${system}";
        packages = {
          inherit (pkgs)
            sync-git-tag-with-poetry resolve-version update-changelog
            pre-release poetry-run docs;
          "{{ package }}" = pkgs.python3Packages."{{ package }}";
        };
        devShells = {
          default = pkgs.mkShell {
            packages = devShellPackages;
            inherit (self.checks.${system}.preCommitCheck) shellHook;
          };
          # poetry = self.packages."${system}".poetryEnv.env;
        };
      })) {

        overlays.default = inputs.nixpkgs.lib.composeManyExtensions [
          inputs.nix-extra.overlays.utils
          (final: prev: {
            pythonPackagesExtensions = prev.pythonPackagesExtensions ++ [
              (python-final: _: {
                "{{ package }}" = python-final.callPackage ./default.nix { };
              })
            ];
            "poetry-run-{{ package }}" = final.poetry-run.override {
              pythons = with prev; [ python39 python310 python311 ];
            };
          })
        ];
      };

}
